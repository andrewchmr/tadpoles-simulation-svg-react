{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["v","m","width","window","innerWidth","height","innerHeight","App","props","state","vx","vy","px","Array","fill","Math","random","py","count","setInterval","update","this","dx","dy","x","y","speed","sqrt","countNew","k1","setState","j","k2","sin","firstPoint","buffer","i","length","tailPx","slice","tailPy","rotationEllipse","atan2","PI","viewBox","strokeLinecap","d","getLinePath","stroke","transform","cx","cy","rx","ry","strokeWidth","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.337950be.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\ninterface AppState {\r\n    vx: number,\r\n    vy: number,\r\n    px: number[],\r\n    py: number[],\r\n    count: number\r\n}\r\n\r\nconst v = 2;\r\nconst m = 12;\r\nconst width = window.innerWidth / 5;\r\nconst height = window.innerHeight / 5;\r\n\r\nclass App extends React.Component<{}, AppState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            vx: 0.3 * v,\r\n            vy: 0.3 * v,\r\n            px: new Array(m).fill(Math.random() * width),\r\n            py: new Array(m).fill(Math.random() * height),\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => this.update(), 20);\r\n    }\r\n\r\n    update() {\r\n        // TODO: Cleanup code\r\n        const px = this.state.px;\r\n        const py = this.state.py;\r\n\r\n        let dx = this.state.vx;\r\n        let dy = this.state.vy;\r\n        let x = px[0] += dx;\r\n        let y = py[0] += dy;\r\n        let speed = Math.sqrt(dx * dx + dy * dy);\r\n        const countNew = speed * 10;\r\n        const k1 = -5 - speed / 3;\r\n\r\n        // Bounce off the walls.\r\n        if (x < 0 || x > width) {\r\n            this.setState({vx: -1 * this.state.vx})\r\n        }\r\n        if (y < 0 || y > height) {\r\n            this.setState({vy: -1 * this.state.vy})\r\n        }\r\n\r\n        // Swim!\r\n        for (let j = 1; j < m; ++j) {\r\n            const vx = x - px[j];\r\n            const vy = y - py[j];\r\n            this.setState({count: this.state.count + countNew});\r\n            const k2 = Math.sin(((this.state.count) + j * 3) / 300) / speed;\r\n            px[j] = (x += dx / speed * k1) - dy * k2;\r\n            py[j] = (y += dy / speed * k1) + dx * k2;\r\n            speed = Math.sqrt((dx = vx) * dx + (dy = vy) * dy);\r\n            this.setState({px: px, py: py})\r\n        }\r\n    }\r\n\r\n    getLinePath(px: number[], py: number[]): string {\r\n        const firstPoint = `M${px[0]},${py[0]}`;\r\n        let buffer = ``;\r\n        for (let i = 1; i < px.length; i++) {\r\n            buffer += `L${px[i]},${py[i]}`;\r\n        }\r\n        return `${firstPoint}${buffer}`;\r\n    }\r\n\r\n    render() {\r\n        const tailPx = this.state.px.slice(0, 3);\r\n        const tailPy = this.state.py.slice(0, 3);\r\n        const rotationEllipse = `${Math.atan2(this.state.vy, this.state.vx) * (180 / Math.PI)}, ${this.state.px[0]}, ${this.state.py[0]}`;\r\n\r\n        return <svg viewBox={`0 0 ${width} ${height}`}>\r\n            <path strokeLinecap=\"round\" d={this.getLinePath(this.state.px, this.state.py)} stroke={\"white\"}/>\r\n            <ellipse\r\n                transform={`rotate(${rotationEllipse})`}\r\n                cx={this.state.px[0]} cy={this.state.py[0]} rx={Math.PI * 2} ry={4} fill={\"white\"}/>\r\n            <path strokeWidth={3} strokeLinecap=\"round\" d={this.getLinePath(tailPx, tailPy)} stroke={\"white\"}/>\r\n        </svg>\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}